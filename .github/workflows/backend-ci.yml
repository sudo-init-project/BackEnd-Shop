name: Backend CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_USERNAME: facundo676
  IMAGE_NAME: backend-shop
  INFRA_REPO: sudo-init-project/Infra-App-K8s

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout backend code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn test
      
    - name: Build application
      run: mvn clean package -DskipTests
      
    - name: Generate tags
      id: meta
      run: |
        SHORT_SHA=${GITHUB_SHA::7}
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
        echo "version=${TIMESTAMP}-${SHORT_SHA}" >> $GITHUB_OUTPUT
        
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.short_sha }}
          
    - name: Update infrastructure repository
      run: |
        # Configurar Git con token
        git config --global user.name "CI Bot"
        git config --global user.email "ci-bot@github.com"
        git config --global url."https://x-access-token:${{ secrets.INFRA_TOKEN }}@github.com/".insteadOf "https://github.com/"
        
        # Determinar ambiente basado en branch/tag
        if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          ENV="staging"
        elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          ENV="production"
        else
          ENV="dev"
        fi
        
        echo "üéØ Actualizando ambiente: $ENV"
        
        # Clone infra repo
        git clone https://github.com/${{ env.INFRA_REPO }}.git infra
        cd infra
        
        # Verificar si hay cambios necesarios
        CURRENT_TAG=$(grep -o 'newTag:.*' tags/backend-tag.yaml | cut -d' ' -f2 || echo "none")
        NEW_TAG="${{ steps.meta.outputs.version }}"
        
        echo "üîç Current tag: $CURRENT_TAG"
        echo "üîç New tag: $NEW_TAG"
        
        if [ "$CURRENT_TAG" == "$NEW_TAG" ]; then
          echo "üü¢ No changes needed, tag is already up to date"
          exit 0
        fi
        
        # Update specific environment in overlays
        if [ -f "overlays/$ENV/kustomization.yaml" ]; then
          echo "üìù Updating overlays/$ENV/kustomization.yaml"
          sed -i "s|${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:.*|${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:$NEW_TAG|g" overlays/$ENV/kustomization.yaml
        fi
        
        # Update tags file
        if [ -f "tags/backend-tag.yaml" ]; then
          echo "üìù Updating tags/backend-tag.yaml"
          sed -i "s|newTag:.*|newTag: $NEW_TAG|g" tags/backend-tag.yaml
        fi
        
        # Update base kustomization if exists
        if [ -f "base/kustomization.yaml" ]; then
          echo "üìù Updating base/kustomization.yaml"
          sed -i "s|${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:.*|${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:$NEW_TAG|g" base/kustomization.yaml
        fi
        
        # Check if there are changes to commit
        if git diff --quiet; then
          echo "üü¢ No changes to commit"
          exit 0
        fi
        
        # Show changes
        echo "üìã Changes to be committed:"
        git diff --name-only
        
        # Commit and push
        git add .
        git commit -m "üöÄ Update backend ($ENV) to $NEW_TAG"
        git push origin master
        
        echo "‚úÖ Successfully updated infrastructure repository"
